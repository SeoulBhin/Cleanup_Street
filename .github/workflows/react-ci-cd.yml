name: React Frontend CI/CD (Blue/Green)

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행
    paths:
      - 'frontend/**' # frontend 폴더 내 변경사항이 있을 때만 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: self-hosted # EC2에 설치된 Self-Hosted 러너 사용

    steps:
    - name: Checkout code
      uses: actions/checkout@v3 # GitHub 저장소에서 코드 체크아웃

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 # Docker 빌드 엔진 설정 (멀티 아키텍처 빌드 등)

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2 # GHCR에 로그인하여 Docker 이미지 푸시 권한 획득
      with:
        registry: ghcr.io
        username: ${{ github.actor }} # GitHub 사용자 이름
        password: ${{ secrets.GHCR_TOKEN }} # 위에서 설정한 GitHub Secret 사용
    - name: Set up Docker Buildx
      uses: docker/setup-build-action@v3

    - name: Build and push React Docker image
      uses: docker/build-push-action@v4 # Docker 이미지 빌드 및 GHCR에 푸시
      with:
        context: ./frontend # Dockerfile이 있는 frontend 폴더 지정
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/Cleanup_Street:latest # GHCR에 푸시될 이미지 이름:태그
        cache-from: type=gha # GitHub Actions 캐싱을 사용하여 빌드 속도 향상
        cache-to: type=gha,mode=max

    - name: Deploy with Blue/Green Strategy
      run: |
        echo "Starting React Frontend Blue/Green Deployment..."

        # 1. 현재 어떤 컨테이너가 서비스 중인지 확인 (Blue 또는 Green)
        # `docker ps -q -f name=react-app-blue` : 'react-app-blue'라는 이름의 실행 중인 컨테이너 ID 조회
        # `-q` : ID만 출력, `-f name=` : 이름으로 필터링
        EXISTING_BLUE=$(docker ps -q -f name=react-app-blue)
        
        # 2. 다음으로 배포할 컨테이너의 색상(Blue/Green) 및 포트 결정
        # 컨테이너는 내부적으로 80번 포트 (Nginx)를 사용하고, EC2 호스트에 다른 포트로 매핑
        NEW_COLOR=""
        OLD_COLOR=""
        NEW_PORT="" # 새로운 컨테이너가 EC2 호스트에 매핑될 포트
        
        if [ -z "$EXISTING_BLUE" ]; then
          # 현재 blue가 없으면 (즉, green이 서비스 중이거나 첫 배포), 다음은 blue에 배포
          NEW_COLOR="blue"
          OLD_COLOR="green"
          NEW_PORT=8080 # EC2 호스트의 8080번 포트에 매핑
        else
          # 현재 blue가 서비스 중이면, 다음은 green에 배포
          NEW_COLOR="green"
          OLD_COLOR="blue"
          NEW_PORT=8081 # EC2 호스트의 8081번 포트에 매핑
        fi

        echo "Deploying new React app to ${NEW_COLOR} environment on EC2 host port ${NEW_PORT}"
        
        # 3. 새 버전의 Docker 이미지 풀(Pull) 및 컨테이너 실행
        docker pull ghcr.io/${{ github.repository_owner }}/Cleanup_Street:latest
        docker run -d \
                   --name react-app-${NEW_COLOR} \
                   -p ${NEW_PORT}:80 \
                   ghcr.io/${{ github.repository_owner }}/Cleanup_Street:latest
        
        # 4. 헬스 체크: 새 컨테이너가 정상적으로 시작될 때까지 대기
        echo "Waiting for React app on port ${NEW_PORT} to be healthy..."
        sleep 10 # 컨테이너가 시작될 충분한 시간을 줌
        for i in {1..20}; do # 최대 20번 (100초) 시도
          # curl을 사용하여 새 컨테이너의 헬스 체크 엔드포인트에 접속 시도
          # React 앱은 정적 파일이므로, 기본 URL 접속으로 헬스 체크 가능
          if curl -s http://localhost:${NEW_PORT} > /dev/null; then
            echo "React app health check passed on port ${NEW_PORT}!"
            
            # 5. 트래픽 전환: Nginx 설정 파일을 변경하고 Nginx 리로드
            echo "Switching Nginx traffic to React app on EC2 host port ${NEW_PORT}"
            # `upstream react_servers` 정의를 새 컨테이너의 포트로 변경
            echo "upstream react_servers { server 127.0.0.1:${NEW_PORT}; }" | sudo tee /etc/nginx/conf.d/react-upstream.conf
            # Nginx 설정 변경 후 리로드. `sudo` 권한은 사전 설정 필수.
            sudo systemctl reload nginx
            
            # 6. 이전 버전 컨테이너 중지 및 삭제 (무중단 전환 후)
            OLD_CONTAINER=$(docker ps -q -f name=react-app-${OLD_COLOR})
            if [ -n "$OLD_CONTAINER" ]; then
              echo "Stopping and removing old React app container: react-app-${OLD_COLOR}"
              docker stop react-app-${OLD_COLOR}
              docker rm react-app-${OLD_COLOR}
            fi
            echo "React Frontend Deployment successful!"
            exit 0 # 성공적으로 배포 완료
          fi
          echo "React app health check attempt $i failed. Retrying in 5 seconds..."
          sleep 5
        done
        
        # 헬스 체크 실패 시 롤백 (새로 띄운 컨테이너 삭제)
        echo "React app health check failed after multiple attempts. Rolling back deployment."
        docker stop react-app-${NEW_COLOR}
        docker rm react-app-${NEW_COLOR}
        exit 1 # 배포 실패 처리
