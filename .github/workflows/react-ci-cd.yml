# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: React Frontend CI/CD (Blue/Green)

# 워크플로우가 언제 실행될지를 정의합니다.
on:
  push:
    branches:
      - main
  workflow_dispatch:

# 실행될 작업(job)들을 정의합니다.
jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. GHCR 로그인
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    # 3. Docker Buildx 설정
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 4. Docker 이미지 빌드 및 푸시
    - name: Build and push React Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ghcr.io/seoulbhin/cleanup-street-react:latest

    # 5. 블루/그린 전략으로 배포
    - name: Deploy with Blue/Green Strategy
      run: |
        echo "Starting React Frontend Blue/Green Deployment..."

        EXISTING_BLUE=$(docker ps -q -f name=cleanup-street-react-blue)
        
        if [ -z "$EXISTING_BLUE" ]; then
          NEW_COLOR="blue"
          OLD_COLOR="green"
          NEW_PORT=8080
        else
          NEW_COLOR="green"
          OLD_COLOR="blue"
          NEW_PORT=8081
        fi

        echo "Deploying new React app to ${NEW_COLOR} on EC2 host port ${NEW_PORT}"
        
        docker pull ghcr.io/seoulbhin/cleanup-street-react:latest
        docker run -d \
                   --name cleanup-street-react-${NEW_COLOR} \
                   -p ${NEW_PORT}:80 \
                   ghcr.io/seoulbhin/cleanup-street-react:latest

        echo "Waiting for React app on port ${NEW_PORT} to be healthy..."
        sleep 10
        for i in {1..5}; do # [디버깅] 시도 횟수를 5번으로 줄여 빠르게 확인
          if curl -s http://localhost:${NEW_PORT} > /dev/null; then
            echo "Health check passed!"
            echo "Switching Nginx traffic to port ${NEW_PORT}"
            echo "upstream react_servers { server 127.0.0.1:${NEW_PORT}; }" | sudo tee /etc/nginx/conf.d/react-upstream.conf
            sudo systemctl reload nginx

            OLD_CONTAINER=$(docker ps -q -f name=cleanup-street-react-${OLD_COLOR})
            if [ -n "$OLD_CONTAINER" ]; then
              echo "Stopping and removing old container: cleanup-street-react-${OLD_COLOR}"
              docker stop cleanup-street-react-${OLD_COLOR}
              docker rm cleanup-street-react-${OLD_COLOR}
            fi
            echo "React Frontend Deployment successful!"
            exit 0
          fi
          echo "Health check attempt $i failed. Retrying..."
          sleep 5
        done
        
        # [디버깅] 헬스 체크 실패 시 컨테이너를 삭제하지 않고 로그를 출력하도록 수정
        echo "Health check failed. Showing container logs for debugging."
        echo "--- LOGS FOR cleanup-street-react-${NEW_COLOR} ---"
        docker logs cleanup-street-react-${NEW_COLOR}
        echo "--- END LOGS ---"
        
        # [디버깅] 컨테이너를 삭제하는 롤백 부분을 주석 처리하여 컨테이너를 남겨둡니다.
        # echo "Rolling back."
        # docker stop cleanup-street-react-${NEW_COLOR}
        # docker rm cleanup-street-react-${NEW_COLOR}
        
        exit 1 # 배포 실패로 종료

