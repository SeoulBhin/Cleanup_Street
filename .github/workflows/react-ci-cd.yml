# 워크플로우의 이름을 지정합니다.
name: React Frontend CI/CD (Blue/Green)

# 워크플로우 실행 조건을 정의합니다.
on:
  # 1. main 브랜치에 코드가 푸시될 때 자동으로 실행됩니다.
  push:
    branches:
      - main
  # 2. GitHub Actions 탭에서 수동으로 실행할 수 있도록 합니다.
  workflow_dispatch:

# 실행될 작업을 정의합니다.
jobs:
  build-and-deploy:
    # 이 작업이 EC2에 설치한 self-hosted 러너에서 실행되도록 지정합니다.
    runs-on: self-hosted

    steps:
    # 1. 코드 체크아웃: GitHub 저장소의 코드를 러너(EC2)로 가져옵니다.
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. GHCR 로그인: Docker 이미지를 푸시하기 위해 GitHub Container Registry에 로그인합니다.
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    # 3. Docker Buildx 설정: 고급 기능을 지원하는 Docker 빌드 엔진을 설정합니다.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 4. Docker 이미지 빌드 및 푸시: React 앱을 Docker 이미지로 만들고 GHCR에 업로드합니다.
    - name: Build and push React Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ghcr.io/seoulbhin/cleanup-street-react:latest
        # GitHub 캐시 서비스가 불안정할 경우를 대비해 캐시 기능은 비활성화 상태로 둡니다.
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

    # 5. 블루/그린 전략으로 배포: EC2 서버에서 무중단 배포 스크립트를 실행합니다.
    - name: Deploy with Blue/Green Strategy
      run: |
        echo "Starting React Frontend Blue/Green Deployment..."

        EXISTING_BLUE=$(docker ps -q -f name=cleanup-street-react-blue)
        
        if [ -z "$EXISTING_BLUE" ]; then
          NEW_COLOR="blue"
          OLD_COLOR="green"
          NEW_PORT=8080
        else
          NEW_COLOR="green"
          OLD_COLOR="blue"
          NEW_PORT=8081
        fi

        echo "Deploying new React app to ${NEW_COLOR} on EC2 host port ${NEW_PORT}"
        
        docker pull ghcr.io/seoulbhin/cleanup-street-react:latest
        docker run -d \
                   --name cleanup-street-react-${NEW_COLOR} \
                   -p ${NEW_PORT}:80 \
                   ghcr.io/seoulbhin/cleanup-street-react:latest

        echo "Waiting for React app on port ${NEW_PORT} to be healthy..."
        sleep 10
        for i in {1..20}; do
          if curl -s http://localhost:${NEW_PORT} > /dev/null; then
            echo "Health check passed!"
            echo "Switching Nginx traffic to port ${NEW_PORT}"
            echo "upstream react_servers { server 127.0.0.1:${NEW_PORT}; }" | sudo tee /etc/nginx/conf.d/react-upstream.conf
            sudo systemctl reload nginx

            OLD_CONTAINER=$(docker ps -q -f name=cleanup-street-react-${OLD_COLOR})
            if [ -n "$OLD_CONTAINER" ]; then
              echo "Stopping and removing old container: cleanup-street-react-${OLD_COLOR}"
              docker stop cleanup-street-react-${OLD_COLOR}
              docker rm cleanup-street-react-${OLD_COLOR}
            fi
            echo "React Frontend Deployment successful!"
            exit 0
          fi
          echo "Health check attempt $i failed. Retrying..."
          sleep 5
        done
        
        # 헬스 체크 실패 시 원래의 롤백 로직을 수행합니다.
        echo "Health check failed. Rolling back."
        docker stop cleanup-street-react-${NEW_COLOR}
        docker rm cleanup-street-react-${NEW_COLOR}
        exit 1 # 배포 실패로 종료

