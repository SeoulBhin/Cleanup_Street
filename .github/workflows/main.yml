name: Full CI/CD (Frontend + Backend, Blue/Green, Nginx Auto-Switch)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      # GHCR Images
      BE_IMAGE: ghcr.io/seoulbhin/cleanup-street-spring
      FE_IMAGE: ghcr.io/seoulbhin/cleanup-street-react

      # Container Names
      BE_PREFIX: cleanup-street-spring
      FE_PREFIX: cleanup-street-react

      # Ports (Blue/Green)
      BE_BLUE_PORT: 9090
      BE_GREEN_PORT: 9091
      FE_BLUE_PORT: 8080
      FE_GREEN_PORT: 8081

      # Health
      HEALTH_PATH: "/actuator/health"
      INITIAL_SLEEP: 25
      RETRIES: 12
      RETRY_INTERVAL: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🧹 Pre-Deployment Cleanup (every deploy)
        run: |
          echo "Docker prune..."
          docker container prune -f
          docker image prune -af
          docker volume prune -f
          docker network prune -f
          echo "Done."

      # Build & Push BACKEND
      - name: Build & Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.BE_IMAGE }}:${{ github.sha }}
            ${{ env.BE_IMAGE }}:latest

      # Build & Push FRONTEND
      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FE_IMAGE }}:${{ github.sha }}
            ${{ env.FE_IMAGE }}:latest

      - name: 🚀 Deploy (Blue/Green) + Nginx Auto Switch
        env:
          SPRING_PROFILES_ACTIVE: prod
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail

          echo "=== Decide next colors ==="
          # Backend color
          BE_EXISTING_BLUE=$(docker ps -q -f name=${BE_PREFIX}-blue || true)
          if [ -z "$BE_EXISTING_BLUE" ]; then
            BE_NEW_COLOR="blue";  BE_OLD_COLOR="green";  BE_NEW_PORT=${BE_BLUE_PORT}
          else
            BE_NEW_COLOR="green"; BE_OLD_COLOR="blue";   BE_NEW_PORT=${BE_GREEN_PORT}
          fi
          # Frontend color
          FE_EXISTING_BLUE=$(docker ps -q -f name=${FE_PREFIX}-blue || true)
          if [ -z "$FE_EXISTING_BLUE" ]; then
            FE_NEW_COLOR="blue";  FE_OLD_COLOR="green";  FE_NEW_PORT=${FE_BLUE_PORT}
          else
            FE_NEW_COLOR="green"; FE_OLD_COLOR="blue";   FE_NEW_PORT=${FE_GREEN_PORT}
          fi

          echo "BE: new=${BE_NEW_COLOR} port=${BE_NEW_PORT}, old=${BE_OLD_COLOR}"
          echo "FE: new=${FE_NEW_COLOR} port=${FE_NEW_PORT}, old=${FE_OLD_COLOR}"

          echo "=== Stop stale new-color containers if exist ==="
          docker rm -f ${BE_PREFIX}-${BE_NEW_COLOR} || true
          docker rm -f ${FE_PREFIX}-${FE_NEW_COLOR} || true

          echo "=== Pull images ==="
          docker pull ${BE_IMAGE}:${IMAGE_TAG}
          docker pull ${FE_IMAGE}:${IMAGE_TAG}

          echo "=== Run Backend ${BE_NEW_COLOR} on ${BE_NEW_PORT} ==="
          docker run -d \
            --name ${BE_PREFIX}-${BE_NEW_COLOR} \
            -p ${BE_NEW_PORT}:8080 \
            -e SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}" \
            -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
            -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
            -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
            -e JAVA_TOOL_OPTIONS="${JAVA_TOOL_OPTIONS}" \
            ${BE_IMAGE}:${IMAGE_TAG}

          echo "=== Run Frontend ${FE_NEW_COLOR} on ${FE_NEW_PORT} ==="
          docker run -d \
            --name ${FE_PREFIX}-${FE_NEW_COLOR} \
            -p ${FE_NEW_PORT}:80 \
            ${FE_IMAGE}:${IMAGE_TAG}

          echo "=== Warm-up ${INITIAL_SLEEP}s ==="
          sleep ${INITIAL_SLEEP}

          echo "=== Health check: Backend ==="
          BE_OK=0
          for i in $(seq 1 ${RETRIES}); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${BE_NEW_PORT}${HEALTH_PATH}" || echo "000")
            if [ "$code" = "200" ]; then BE_OK=1; echo "BE OK on attempt $i"; break; fi
            echo "BE attempt $i failed (HTTP $code); sleep ${RETRY_INTERVAL}s"
            sleep ${RETRY_INTERVAL}
          done

          echo "=== Health check: Frontend ==="
          FE_OK=0
          for i in $(seq 1 ${RETRIES}); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${FE_NEW_PORT}/" || echo "000")
            if [ "$code" = "200" ]; then FE_OK=1; echo "FE OK on attempt $i"; break; fi
            echo "FE attempt $i failed (HTTP $code); sleep ${RETRY_INTERVAL}s"
            sleep ${RETRY_INTERVAL}
          done

          if [ "$BE_OK" -ne 1 ] || [ "$FE_OK" -ne 1 ]; then
            echo "❌ Health checks failed. Rolling back new containers..."
            docker logs --tail 200 ${BE_PREFIX}-${BE_NEW_COLOR} || true
            docker logs --tail 200 ${FE_PREFIX}-${FE_NEW_COLOR} || true
            docker rm -f ${BE_PREFIX}-${BE_NEW_COLOR} || true
            docker rm -f ${FE_PREFIX}-${FE_NEW_COLOR} || true
            exit 1
          fi

          echo "=== Generate NGINX app.conf dynamically ==="
          # 단일 app.conf를 재생성: /api -> Backend(New), / -> Frontend(New)
          sudo mkdir -p /etc/nginx/conf.d
                    sudo cp -f /etc/nginx/conf.d/app.conf /etc/nginx/conf.d/app.conf.bak 2>/dev/null || true
          sudo tee /etc/nginx/conf.d/app.conf > /dev/null <<EOL

            server {
                listen 80;
                server_name _;

            location /api/ {
                proxy_pass http://127.0.0.1:${BE_NEW_PORT}/;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_buffering off;
            }

            location / {
                proxy_pass http://127.0.0.1:${FE_NEW_PORT};
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_buffering off;
            }
            }
                        EOL
