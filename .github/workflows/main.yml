name: Full CI/CD (Frontend + Backend, Blue/Green, Nginx Auto-Switch)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      BE_IMAGE: ghcr.io/seoulbhin/cleanup-street-spring
      FE_IMAGE: ghcr.io/seoulbhin/cleanup-street-react
      BE_PREFIX: cleanup-street-spring
      FE_PREFIX: cleanup-street-react
      BE_BLUE_PORT: 9090
      BE_GREEN_PORT: 9091
      FE_BLUE_PORT: 8080
      FE_GREEN_PORT: 8081
      HEALTH_PATH: "/api/hello"
      INITIAL_SLEEP: 25
      RETRIES: 12
      RETRY_INTERVAL: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.BE_IMAGE }}:${{ github.sha }}
            ${{ env.BE_IMAGE }}:latest

      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FE_IMAGE }}:${{ github.sha }}
            ${{ env.FE_IMAGE }}:latest

      - name: Deploy Blue/Green
        run: |
          set -euo pipefail
          # Decide colors
          BE_EXISTING=$(docker ps -q -f name=${BE_PREFIX}-blue || true)
          if [ -z "$BE_EXISTING" ]; then
            BE_NEW_COLOR=blue; BE_NEW_PORT=${BE_BLUE_PORT}; BE_OLD_COLOR=green
          else
            BE_NEW_COLOR=green; BE_NEW_PORT=${BE_GREEN_PORT}; BE_OLD_COLOR=blue
          fi

          FE_EXISTING=$(docker ps -q -f name=${FE_PREFIX}-blue || true)
          if [ -z "$FE_EXISTING" ]; then
            FE_NEW_COLOR=blue; FE_NEW_PORT=${FE_BLUE_PORT}; FE_OLD_COLOR=green
          else
            FE_NEW_COLOR=green; FE_NEW_PORT=${FE_GREEN_PORT}; FE_OLD_COLOR=blue
          fi

          docker rm -f ${BE_PREFIX}-${BE_NEW_COLOR} || true
          docker rm -f ${FE_PREFIX}-${FE_NEW_COLOR} || true

          docker run -d --name ${BE_PREFIX}-${BE_NEW_COLOR} -p ${BE_NEW_PORT}:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
            -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
            -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
            ${BE_IMAGE}:${GITHUB_SHA}

          docker run -d --name ${FE_PREFIX}-${FE_NEW_COLOR} -p ${FE_NEW_PORT}:80 \
            ${FE_IMAGE}:${GITHUB_SHA}

          echo "Waiting for containers..."
          sleep ${INITIAL_SLEEP}

          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${BE_NEW_PORT}${HEALTH_PATH} || echo "000")
          if [ "$code" != "200" ]; then
            echo "❌ Backend health check failed"
            docker logs ${BE_PREFIX}-${BE_NEW_COLOR} || true
            exit 1
          fi

          sudo tee /etc/nginx/conf.d/app.conf > /dev/null <<EOL
            server {
                listen 80;
                server_name _;

                location /api/ {
                    proxy_pass http://127.0.0.1:${BE_NEW_PORT}/;
                }

                location / {
                    proxy_pass http://127.0.0.1:${FE_NEW_PORT};
                }
            }
            EOL
                    sudo nginx -s reload
