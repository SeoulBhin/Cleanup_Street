name: CI/CD Docker

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  VERSION: ${{ github.sha }}
  NAME: cleanup-street-app # 컨테이너 이름 (소문자, 하이픈 권장)
  REPO_NAME: cleanup_street

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE: ${{ steps.docker_meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Docker Meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          flavor: |
            latest=true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with Zero-Downtime
        run: |
          # 1. 사용할 이미지 이름과 현재 실행중인 컨테이너(블루) 확인
          DOCKER_IMAGE=$(echo "${{ needs.build.outputs.DOCKER_IMAGE }}" | grep ':latest')
          CURRENT_BLUE=$(docker ps -q -f name=${{ env.NAME }}-blue)
          
          # 2. 블루/그린 전환 로직: 현재 버전에 따라 다음 버전의 이름과 포트를 결정
          if [ -z "$CURRENT_BLUE" ]; then
            TARGET_CONTAINER_NAME="${{ env.NAME }}-blue"
            TARGET_PORT=3000
            OLD_CONTAINER_NAME="${{ env.NAME }}-green"
          else
            TARGET_CONTAINER_NAME="${{ env.NAME }}-green"
            TARGET_PORT=3001
            OLD_CONTAINER_NAME="${{ env.NAME }}-blue"
          fi

          echo "Starting new container: $TARGET_CONTAINER_NAME on port $TARGET_PORT"
          
          # 3. 최신 이미지 받고 새 컨테이너(그린) 시작
          docker pull $DOCKER_IMAGE
          docker run -d --name $TARGET_CONTAINER_NAME -p $TARGET_PORT:3000 $DOCKER_IMAGE
          
          # 4. 새 컨테이너가 정상적으로 실행될 때까지 대기 (Health Check)
          echo "Waiting for health check..."
          sleep 10

          for i in {1..10}; do
            # curl로 새 컨테이너에 요청을 보내 응답이 오는지 확인
            if curl -s http://localhost:$TARGET_PORT > /dev/null; then
              echo "Health check passed!"
              
              # 5. Nginx 설정 변경하여 트래픽을 새 포트로 전환
              echo "Switching Nginx proxy to port $TARGET_PORT"
              echo "upstream app_server { server 127.0.0.1:$TARGET_PORT; }" | sudo tee /etc/nginx/conf.d/upstream.conf
              sudo systemctl reload nginx
              
              # 6. 이전 컨테이너(블루) 중지 및 삭제
              if [ ! -z "$OLD_CONTAINER_NAME" ]; then
                echo "Stopping old container: $OLD_CONTAINER_NAME"
                docker stop $OLD_CONTAINER_NAME || true
                docker rm $OLD_CONTAINER_NAME || true
              fi

              exit 0
            fi
            echo "Health check attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          done
          
          # Health check 최종 실패 시 롤백 (새 컨테이너 삭제)
          echo "Health check failed. Rolling back."
          docker stop $TARGET_CONTAINER_NAME
          docker rm $TARGET_CONTAINER_NAME
          exit 1
