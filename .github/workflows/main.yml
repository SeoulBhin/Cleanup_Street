name: CI/CD Docker

on:
  push:
    branches: [ main ]

env:
  # DOCKER_IMAGE 변수는 각 Job에서 동적으로 생성하므로 최상위에서는 삭제합니다.
  VERSION: ${{ github.sha }}
  NAME: go_cicd
  REPO_NAME: cleanup_street # 레포지토리 이름을 변수로 지정

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs: # build job의 결과를 deploy job에 전달하기 위한 설정
      DOCKER_IMAGE: ${{ steps.docker_meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Docker 이미지 메타데이터(태그, 레이블 등)를 생성하는 단계
      - name: Docker Meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          # Docker 태그 규칙에 맞게 모든 값을 소문자로 변환해주는 옵션
          flavor: |
            latest=true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }} # 여기서 생성된 소문자 태그를 사용
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to self-hosted runner
        run: |
          # build job에서 전달받은 소문자 이미지 이름을 사용
          DOCKER_IMAGE=${{ needs.build.outputs.DOCKER_IMAGE }}
          
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker pull $DOCKER_IMAGE
          docker run -d -p 80:3000 --name ${{ env.NAME }} --restart always $DOCKER_IMAGE