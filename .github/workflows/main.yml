name: CI/CD Docker

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  VERSION: ${{ github.sha }}
  NAME: cleanup-street-app # 컨테이너 이름 (소문자, 하이픈 권장)
  REPO_NAME: cleanup_street

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE: ${{ steps.docker_meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Docker Meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          flavor: |
            latest=true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with Zero-Downtime
        run: |
          DOCKER_IMAGE=$(echo "${{ needs.build.outputs.DOCKER_IMAGE }}" | grep ':latest')
          CURRENT_BLUE=$(docker ps -q -f name=${{ env.NAME }}-blue)
          
          if [ -z "$CURRENT_BLUE" ]; then
            TARGET_CONTAINER_NAME="${{ env.NAME }}-blue"
            TARGET_PORT=3000
            OLD_CONTAINER_NAME="${{ env.NAME }}-green"
          else
            TARGET_CONTAINER_NAME="${{ env.NAME }}-green"
            TARGET_PORT=3001
            OLD_CONTAINER_NAME="${{ env.NAME }}-blue"
          fi

          echo "Starting new container: $TARGET_CONTAINER_NAME on port $TARGET_PORT"
          
          docker pull $DOCKER_IMAGE
          docker run -d --name $TARGET_CONTAINER_NAME -p $TARGET_PORT:3000 $DOCKER_IMAGE
          
          echo "Waiting for health check..."
          sleep 10

          for i in {1..10}; do
            if curl -s http://localhost:$TARGET_PORT > /dev/null; then
              echo "Health check passed!"
              
              echo "Overwriting Nginx config to point to port $TARGET_PORT"
              # Nginx 설정을 변수로 정의 (셸 변수 $host 등은 이스케이프 처리)
              NGINX_CONFIG="
              upstream app_server {
                  server 127.0.0.1:$TARGET_PORT;
              }
              server {
                  listen 80;
                  server_name _;
                  location / {
                      proxy_pass http://app_server;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
              "
              # 충돌을 막기 위해 메인 설정 파일을 덮어쓰기
              echo "$NGINX_CONFIG" | sudo tee /etc/nginx/conf.d/cleanup-street.conf

              # 새 설정 테스트 후 Nginx 재시작
              if sudo nginx -t; then
                sudo systemctl restart nginx
              else
                echo "Nginx configuration test failed. Aborting deployment."
                exit 1
              fi
              
              if [ ! -z "$OLD_CONTAINER_NAME" ]; then
                echo "Stopping old container: $OLD_CONTAINER_NAME"
                docker stop $OLD_CONTAINER_NAME || true
                docker rm $OLD_CONTAINER_NAME || true
              fi

              exit 0
            fi
            echo "Health check attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          done
          
          echo "Health check failed. Rolling back."
          docker stop $TARGET_CONTAINER_NAME
          docker rm $TARGET_CONTAINER_NAME
          exit 1

