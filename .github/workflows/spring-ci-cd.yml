# 워크플로우의 이름을 지정합니다.
name: Spring Backend CI/CD (Blue/Green)

# 워크플로우 실행 조건을 정의합니다.
on:
  push:
    branches:
      - main
  workflow_dispatch:

# 실행될 작업을 정의합니다.
jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. GHCR 로그인
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    # 3. Docker Buildx 설정
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 4. Docker 이미지 빌드 및 푸시
    - name: Build and push Spring Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ghcr.io/seoulbhin/cleanup-street-spring:latest

    # 5. 블루/그린 전략으로 배포
    - name: Deploy with Blue/Green Strategy
      run: |
        echo "Starting Spring Backend Blue/Green Deployment..."

        EXISTING_BLUE=$(docker ps -q -f name=cleanup-street-spring-blue)
        
        if [ -z "$EXISTING_BLUE" ]; then
          NEW_COLOR="blue"
          OLD_COLOR="green"
          NEW_PORT=9090
        else
          NEW_COLOR="green"
          OLD_COLOR="blue"
          NEW_PORT=9091
        fi

        echo "Deploying new Spring app to ${NEW_COLOR} on EC2 host port ${NEW_PORT}"
        
        # 이름 충돌 방지를 위해 기존 컨테이너가 있다면 먼저 삭제합니다.
        docker rm -f cleanup-street-spring-${NEW_COLOR} || true
        
        docker pull ghcr.io/seoulbhin/cleanup-street-spring:latest
        docker run -d \
                   --name cleanup-street-spring-${NEW_COLOR} \
                   -p ${NEW_PORT}:8080 \
                   ghcr.io/seoulbhin/cleanup-street-spring:latest

        # [최종 디버깅] 컨테이너가 즉시 충돌하는지 확인하기 위해, 헬스 체크 전에 로그를 먼저 확인합니다.
        echo "Waiting a few seconds for container to initialize or crash..."
        sleep 10

        echo "--- Container status before health check ---"
        docker ps -a | grep "cleanup-street-spring-${NEW_COLOR}" || echo "Container not found!"

        echo "--- Early logs from container (if any) ---"
        docker logs cleanup-street-spring-${NEW_COLOR}
        echo "--- End of early logs ---"

        echo "Starting health check..."
        for i in {1..5}; do
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${NEW_PORT}/api/hello)
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "Health check passed!"
            # (이하 성공 로직은 생략)
            exit 0 # 임시로 성공 처리
          fi
          echo "Health check attempt $i failed (HTTP Code: $RESPONSE_CODE). Retrying..."
          sleep 5
        done
        
        echo "Health check failed."
        exit 1

