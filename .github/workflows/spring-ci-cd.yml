name: Spring Backend CI/CD (Blue/Green)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      IMAGE_NAME: ghcr.io/seoulbhin/cleanup-street-spring
      CONTAINER_PREFIX: cleanup-street-spring

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Spring Docker image
      id: build_and_push
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.IMAGE_NAME }}:latest
    - name: üîß Pre-Deployment Cleanup
      run: |
        echo "üßπ Cleaning up Docker resources..."
        docker container prune -f
        docker image prune -af
        docker volume prune -f
        docker network prune -f
        echo "‚úÖ Cleanup done"
    - name: Deploy with Blue/Green Strategy
      env:
        SPRING_PROFILES_ACTIVE: prod
        SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
        SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
        HEALTH_PATH: "/actuator/health"
        INITIAL_SLEEP: 45       # ‚¨Ö ÎåÄÍ∏∞ÏãúÍ∞Ñ Ï¶ùÍ∞Ä
        RETRIES: 15             # ‚¨Ö Ïû¨ÏãúÎèÑ ÌöüÏàò Ï¶ùÍ∞Ä
        RETRY_INTERVAL: 5
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Starting Blue/Green Deployment for tag: ${IMAGE_TAG}"

        EXISTING_BLUE=$(docker ps -q -f name=${CONTAINER_PREFIX}-blue)
        if [ -z "$EXISTING_BLUE" ]; then
          NEW_COLOR="blue"
          OLD_COLOR="green"
          NEW_PORT=9090
        else
          NEW_COLOR="green"
          OLD_COLOR="blue"
          NEW_PORT=9091
        fi

        echo "Deploying new version to ${NEW_COLOR} on port ${NEW_PORT}"
        echo "Old version is ${OLD_COLOR}"

        docker rm -f ${CONTAINER_PREFIX}-${NEW_COLOR} || true
        docker pull ${IMAGE_NAME}:${IMAGE_TAG}

        docker run -d \
          --name ${CONTAINER_PREFIX}-${NEW_COLOR} \
          -p ${NEW_PORT}:8080 \
          -e SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}" \
          -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
          -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
          -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
          -e JAVA_TOOL_OPTIONS="${JAVA_TOOL_OPTIONS}" \
          ${IMAGE_NAME}:${IMAGE_TAG}

        echo "Waiting ${INITIAL_SLEEP}s for the container to warm up..."
        sleep ${INITIAL_SLEEP}

        echo "Starting health check on http://localhost:${NEW_PORT}${HEALTH_PATH}"
        SUCCESS=0
        for i in $(seq 1 ${RETRIES}); do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${NEW_PORT}${HEALTH_PATH}" || echo "000")
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Health check passed on attempt $i."
            SUCCESS=1
            break
          fi
          echo "‚ö†Ô∏è Health check attempt $i failed (HTTP code: $HTTP_CODE). Retrying in ${RETRY_INTERVAL}s..."
          sleep ${RETRY_INTERVAL}
        done

        if [ "$SUCCESS" -ne 1 ]; then
          echo "‚ùå Health check failed after ${RETRIES} attempts."
          echo "--- Last 200 lines of logs from failed container ---"
          docker logs --tail 200 ${CONTAINER_PREFIX}-${NEW_COLOR} || true
          echo "--- End of logs ---"
          docker rm -f ${CONTAINER_PREFIX}-${NEW_COLOR} || true
          echo "Deployment failed. The old version (${OLD_COLOR}) is still active."
          exit 1
        fi

        echo "‚úÖ Health check successful. New version is healthy."
        echo "!!! ACTION REQUIRED: Implement traffic switching logic here. !!!"

        echo "Traffic switched to ${NEW_COLOR}. Cleaning up old container: ${CONTAINER_PREFIX}-${OLD_COLOR}"
        docker rm -f ${CONTAINER_PREFIX}-${OLD_COLOR} || true
        # 7. Switch Traffic
        echo "Switching Nginx to new container on port ${NEW_PORT}"
        sudo sed -i "s|proxy_pass http://127.0.0.1:[0-9]\+;|proxy_pass http://127.0.0.1:${NEW_PORT};|" /etc/nginx/conf.d/app.conf
        sudo nginx -t && sudo systemctl reload nginx
        echo "Nginx reloaded successfully, now serving ${NEW_COLOR}."

        echo "üéâ Blue/Green Deployment successful."
