name: Spring Backend CI/CD (Blue/Green)

on: push: branches: [ main ] workflow_dispatch:

jobs: build-and-deploy: runs-on: self-hosted

steps:
- name: Checkout code
  uses: actions/checkout@v3

- name: Login to GitHub Container Registry
  uses: docker/login-action@v2
  with:
    registry: ghcr.io
    username: ${{ github.actor }}
    password: ${{ secrets.GHCR_TOKEN }}

- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3

- name: Build and push Spring Docker image
  uses: docker/build-push-action@v4
  with:
    context: ./backend
    push: true
    tags: ghcr.io/seoulbhin/cleanup-street-spring:latest

- name: Deploy with Blue/Green Strategy
  env:
    # 애플리케이션 환경
    SPRING_PROFILES_ACTIVE: prod
    SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
    SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
    SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
    # 필요 시 추가(예: Redis, 외부 API 키 등)
    # REDIS_HOST: ${{ secrets.REDIS_HOST }}
    # REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
    # JVM 옵션(메모리 최적화 등)
    JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
    # 헬스 체크 엔드포인트와 대기/재시도 설정
    HEALTH_PATH: "/actuator/health"
    INITIAL_SLEEP: "25"
    RETRIES: "10"
    RETRY_INTERVAL: "5"
  run: |
    echo "Starting Spring Backend Blue/Green Deployment..."

    # 현재 blue가 돌아중인지 확인
    EXISTING_BLUE=$(docker ps -q -f name=cleanup-street-spring-blue)

    if [ -z "$EXISTING_BLUE" ]; then
      NEW_COLOR="blue"
      OLD_COLOR="green"
      NEW_PORT=9090
    else
      NEW_COLOR="green"
      OLD_COLOR="blue"
      NEW_PORT=9091
    fi

    echo "Deploying new Spring app to ${NEW_COLOR} on host port ${NEW_PORT}"

    # 새 슬롯 컨테이너 제거(이름 충돌 방지)
    docker rm -f cleanup-street-spring-${NEW_COLOR} || true

    # 최신 이미지 가져오기
    docker pull ghcr.io/seoulbhin/cleanup-street-spring:latest

    # 새 컨테이너 실행(필수 환경변수 주입)
    docker run -d \
      --name cleanup-street-spring-${NEW_COLOR} \
      -p ${NEW_PORT}:8080 \
      -e SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}" \
      -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
      -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
      -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
      -e JAVA_TOOL_OPTIONS="${JAVA_TOOL_OPTIONS}" \
      ghcr.io/seoulbhin/cleanup-street-spring:latest

    echo "Waiting ${INITIAL_SLEEP}s for the container to warm up..."
    sleep ${INITIAL_SLEEP}

    echo "--- Container status before health check ---"
    docker ps -a | grep "cleanup-street-spring-${NEW_COLOR}" || echo "Container not found!"

    echo "--- Early logs from container (if any) ---"
    docker logs --tail 200 cleanup-street-spring-${NEW_COLOR} || true
    echo "--- End of early logs ---"

    echo "Starting health check on http://localhost:${NEW_PORT}${HEALTH_PATH}"
    SUCCESS=0
    for i in $(seq 1 ${RETRIES}); do
      CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${NEW_PORT}${HEALTH_PATH}")
      if [ "$CODE" -eq 200 ]; then
        echo "Health check passed on attempt $i"
        SUCCESS=1
        break
      fi
      echo "Health check attempt $i failed (HTTP $CODE). Retrying in ${RETRY_INTERVAL}s..."
      sleep ${RETRY_INTERVAL}
    done

    if [ "$SUCCESS" -ne 1 ]; then
      echo "Health check failed. Showing last 200 logs:"
      docker logs --tail 200 cleanup-street-spring-${NEW_COLOR} || true
      echo "Stopping and removing the failed ${NEW_COLOR} container."
      docker rm -f cleanup-street-spring-${NEW_COLOR} || true
      exit 1
    fi

    echo "New ${NEW_COLOR} is healthy. (전환/롤백 로직은 환경에 맞게 구현하세요)"
    # 예: Nginx 프록시 포트 스위치/심볼릭 링크 전환/로드밸런서 타깃 그룹 변경 등
    # 전환 성공 후 이전 슬롯 정리:
    # docker rm -f cleanup-street-spring-${OLD_COLOR} || true